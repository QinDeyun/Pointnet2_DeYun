Load dataset ...
The size of train data is 160
The size of test data is 40
No existing model, starting training from scratch...
Epoch 1 (1/1000):
  0%|                                                                                                                                                                   | 0/10 [00:00<?, ?it/s]
points shape: (16, 1024, 3)
torch.Size([16, 3, 1024])
torch.Size([16, 1024, 3])
torch.Size([16, 512, 3])
torch.Size([16, 3, 16, 512])
torch.Size([16, 64, 16, 512])
torch.Size([16, 64, 512])
torch.Size([16, 3, 32, 512])
torch.Size([16, 128, 32, 512])
torch.Size([16, 128, 512])
torch.Size([16, 3, 128, 512])
torch.Size([16, 128, 128, 512])
torch.Size([16, 128, 512])
torch.Size([16, 320, 512])
torch.Size([16, 512, 3])
torch.Size([16, 128, 3])
torch.Size([16, 128, 32, 323])
torch.Size([16, 323, 32, 128])
torch.Size([16, 128, 32, 128])
torch.Size([16, 128, 128])
torch.Size([16, 128, 64, 323])
torch.Size([16, 323, 64, 128])
torch.Size([16, 256, 64, 128])
torch.Size([16, 256, 128])
torch.Size([16, 128, 128, 323])
torch.Size([16, 323, 128, 128])
torch.Size([16, 256, 128, 128])
torch.Size([16, 256, 128])
torch.Size([16, 640, 128])
torch.Size([16, 128, 3])
torch.Size([16, 128, 640])
torch.Size([16, 1, 128, 643])
torch.Size([16, 643, 128, 1])
torch.Size([16, 1024, 128, 1])
torch.Size([16, 1024, 1])
torch.Size([16, 3, 1])
loss shape torch.Size([])
loss: tensor(3.8995, device='cuda:0', grad_fn=<MseLossBackward>)
points shape: (16, 1024, 3)
torch.Size([16, 3, 1024])
torch.Size([16, 1024, 3])
torch.Size([16, 512, 3])
torch.Size([16, 3, 16, 512])
torch.Size([16, 64, 16, 512])
torch.Size([16, 64, 512])
torch.Size([16, 3, 32, 512])
torch.Size([16, 128, 32, 512])
torch.Size([16, 128, 512])
torch.Size([16, 3, 128, 512])
torch.Size([16, 128, 128, 512])
torch.Size([16, 128, 512])
torch.Size([16, 320, 512])
torch.Size([16, 512, 3])
torch.Size([16, 128, 3])
torch.Size([16, 128, 32, 323])
torch.Size([16, 323, 32, 128])
torch.Size([16, 128, 32, 128])
torch.Size([16, 128, 128])
torch.Size([16, 128, 64, 323])
torch.Size([16, 323, 64, 128])
torch.Size([16, 256, 64, 128])
torch.Size([16, 256, 128])
torch.Size([16, 128, 128, 323])
torch.Size([16, 323, 128, 128])
torch.Size([16, 256, 128, 128])
torch.Size([16, 256, 128])
torch.Size([16, 640, 128])
torch.Size([16, 128, 3])
torch.Size([16, 128, 640])
torch.Size([16, 1, 128, 643])
torch.Size([16, 643, 128, 1])
torch.Size([16, 1024, 128, 1])
torch.Size([16, 1024, 1])
torch.Size([16, 3, 1])
loss shape torch.Size([])
loss: tensor(3.2800, device='cuda:0', grad_fn=<MseLossBackward>)
points shape: (16, 1024, 3)
torch.Size([16, 3, 1024])
torch.Size([16, 1024, 3])
torch.Size([16, 512, 3])
torch.Size([16, 3, 16, 512])
torch.Size([16, 64, 16, 512])
torch.Size([16, 64, 512])
torch.Size([16, 3, 32, 512])
torch.Size([16, 128, 32, 512])
torch.Size([16, 128, 512])
torch.Size([16, 3, 128, 512])
torch.Size([16, 128, 128, 512])
torch.Size([16, 128, 512])
torch.Size([16, 320, 512])
torch.Size([16, 512, 3])
torch.Size([16, 128, 3])
torch.Size([16, 128, 32, 323])
torch.Size([16, 323, 32, 128])
torch.Size([16, 128, 32, 128])
torch.Size([16, 128, 128])
torch.Size([16, 128, 64, 323])
torch.Size([16, 323, 64, 128])
torch.Size([16, 256, 64, 128])
torch.Size([16, 256, 128])
torch.Size([16, 128, 128, 323])
torch.Size([16, 323, 128, 128])
torch.Size([16, 256, 128, 128])
torch.Size([16, 256, 128])
torch.Size([16, 640, 128])
torch.Size([16, 128, 3])
torch.Size([16, 128, 640])
torch.Size([16, 1, 128, 643])
torch.Size([16, 643, 128, 1])
torch.Size([16, 1024, 128, 1])
torch.Size([16, 1024, 1])
torch.Size([16, 3, 1])
loss shape torch.Size([])
loss: tensor(3.3204, device='cuda:0', grad_fn=<MseLossBackward>)
points shape: (16, 1024, 3)
torch.Size([16, 3, 1024])
torch.Size([16, 1024, 3])
torch.Size([16, 512, 3])
torch.Size([16, 3, 16, 512])
torch.Size([16, 64, 16, 512])
torch.Size([16, 64, 512])
torch.Size([16, 3, 32, 512])
torch.Size([16, 128, 32, 512])
torch.Size([16, 128, 512])
torch.Size([16, 3, 128, 512])
torch.Size([16, 128, 128, 512])
torch.Size([16, 128, 512])
torch.Size([16, 320, 512])
torch.Size([16, 512, 3])
torch.Size([16, 128, 3])
torch.Size([16, 128, 32, 323])
torch.Size([16, 323, 32, 128])
torch.Size([16, 128, 32, 128])
torch.Size([16, 128, 128])
torch.Size([16, 128, 64, 323])
torch.Size([16, 323, 64, 128])
torch.Size([16, 256, 64, 128])
torch.Size([16, 256, 128])
torch.Size([16, 128, 128, 323])
torch.Size([16, 323, 128, 128])
torch.Size([16, 256, 128, 128])
torch.Size([16, 256, 128])
torch.Size([16, 640, 128])
torch.Size([16, 128, 3])
torch.Size([16, 128, 640])
torch.Size([16, 1, 128, 643])
torch.Size([16, 643, 128, 1])
torch.Size([16, 1024, 128, 1])
torch.Size([16, 1024, 1])
torch.Size([16, 3, 1])
loss shape torch.Size([])
loss: tensor(3.0186, device='cuda:0', grad_fn=<MseLossBackward>)
Traceback (most recent call last):
  File "/home/zezhi/QinDeyun/Pointnet2_DeYun/train_cls_DeYun.py", line 272, in <module>
    main(args)
  File "/home/zezhi/QinDeyun/Pointnet2_DeYun/train_cls_DeYun.py", line 197, in main
    for batch_id, data in tqdm(enumerate(trainDataLoader, 0), total=len(trainDataLoader), smoothing=0.9):
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/site-packages/tqdm/std.py", line 1195, in __iter__
    for obj in iterable:
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 517, in __next__
    data = self._next_data()
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1182, in _next_data
    idx, data = self._get_data()
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 1148, in _get_data
    success, data = self._try_get_data()
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 986, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/multiprocessing/queues.py", line 104, in get
    if not self._poll(timeout):
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/multiprocessing/connection.py", line 257, in poll
    return self._poll(timeout)
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/multiprocessing/connection.py", line 414, in _poll
    r = wait([self], timeout)
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/multiprocessing/connection.py", line 921, in wait
    ready = selector.select(timeout)
  File "/home/zezhi/anaconda3/envs/pointnet2/lib/python3.7/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt
